package com.fuyd.other;

/**
 * 198. 打家劫舍
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 *
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
 *
 * 示例 1:
 *
 * 输入: [1,2,3,1]
 * 输出: 4
 * 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 *      偷窃到的最高金额 = 1 + 3 = 4 。
 * 示例 2:
 *
 * 输入: [2,7,9,3,1]
 * 输出: 12
 * 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 *      偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 *
 * @author fuyongde
 * @date 2020/2/18
 */
public class Solution198 {

    /**
     * 动态规划
     * 当 n = 1，显然 f(1) = A1
     * 当 n = 2，显然 f(x) = Math(A1, A2)
     * 当 n = 3，分两种情况
     *      1、抢到第三个房子，将数额于第一个房子相加。
     *      2、不抢第三个房子，保持现有最大数额。
     * 得出公式：
     * f(n) = max(f(n - 2) + An, f(n - 1))
     *
     * 增加哨兵 f(-1) = f(0) = 0，简化代码
     *
     */
    public int rob(int[] nums) {
        int prevMax = 0;
        int currMax = 0;
        for (int num : nums) {
            int tmp = currMax;
            currMax = Math.max(prevMax + num, currMax);
            prevMax = tmp;
        }
        return currMax;
    }
}
